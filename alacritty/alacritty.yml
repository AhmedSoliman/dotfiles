env:
  TERM: alacritty

window:
  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 1.0

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  #   padding:
  #     x: 0
  #     y: 0
  # 
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  title: Alacritty

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: JetBrainsMono Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Regular

  italic:
    family: JetBrainsMono Nerd Font
    style: Italic

  bold:
    family: JetBrainsMono Nerd Font
    style: Bold

  # Point size
  size: 16.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  #offset:
  #  x: 0
  #  y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (moonfly)
colors:
  # Default colors
  primary:
    background:        '#080808'
    foreground:        '#b2b2b2'
    bright_foreground: '#eeeeee'

  # Cursor colors
  cursor:
    text:   '#080808'
    cursor: '#9e9e9e'

  # Selection colors
  selection:
    text:       '#080808'
    background: '#b2ceee'

  # Normal colors
  normal:
    black:   '#373c40'
    red:     '#ff5454'
    green:   '#8cc85f'
    yellow:  '#e3c78a'
    blue:    '#80a0ff'
    magenta: '#d183e8'
    cyan:    '#79dac8'
    white:   '#a1aab8'

  # Bright colors
  bright:
    black:   '#7c8f8f'
    red:     '#ff5189'
    green:   '#36c692'
    yellow:  '#bfbf97'
    blue:    '#78c2ff'
    magenta: '#ae81ff'
    cyan:    '#85dc85'
    white:   '#e2637f'

# Visual Bell
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  duration: 20

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # meta key bindings
  - { key: A,         mods: Alt,       chars: "\x1ba"                 }
  - { key: B,         mods: Alt,       chars: "\x1bb"                 }
  - { key: C,         mods: Alt,       chars: "\x1bc"                 }
  - { key: D,         mods: Alt,       chars: "\x1bd"                 }
  - { key: E,         mods: Alt,       chars: "\x1be"                 }
  - { key: F,         mods: Alt,       chars: "\x1bf"                 }
  - { key: G,         mods: Alt,       chars: "\x1bg"                 }
  - { key: H,         mods: Alt,       chars: "\x1bh"                 }
  - { key: I,         mods: Alt,       chars: "\x1bi"                 }
  - { key: J,         mods: Alt,       chars: "\x1bj"                 }
  - { key: K,         mods: Alt,       chars: "\x1bk"                 }
  - { key: L,         mods: Alt,       chars: "\x1bl"                 }
  - { key: M,         mods: Alt,       chars: "\x1bm"                 }
  - { key: N,         mods: Alt,       chars: "\x1bn"                 }
  - { key: O,         mods: Alt,       chars: "\x1bo"                 }
  - { key: P,         mods: Alt,       chars: "\x1bp"                 }
  - { key: Q,         mods: Alt,       chars: "\x1bq"                 }
  - { key: R,         mods: Alt,       chars: "\x1br"                 }
  - { key: S,         mods: Alt,       chars: "\x1bs"                 }
  - { key: T,         mods: Alt,       chars: "\x1bt"                 }
  - { key: U,         mods: Alt,       chars: "\x1bu"                 }
  - { key: V,         mods: Alt,       chars: "\x1bv"                 }
  - { key: W,         mods: Alt,       chars: "\x1bw"                 }
  - { key: X,         mods: Alt,       chars: "\x1bx"                 }
  - { key: Y,         mods: Alt,       chars: "\x1by"                 }
  - { key: Z,         mods: Alt,       chars: "\x1bz"                 }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"                 }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"                 }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"                 }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"                 }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"                 }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"                 }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"                 }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"                 }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"                 }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                 }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"                 }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"                 }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"                 }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"                 }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"                 }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"                 }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                 }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"                 }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"                 }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"                 }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"                 }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"                 }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"                 }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"                 }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                 }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                 }
  - { key: Key1,      mods: Alt,       chars: "\x1b1"                 }
  - { key: Key2,      mods: Alt,       chars: "\x1b2"                 }
  - { key: Key3,      mods: Alt,       chars: "\x1b3"                 }
  - { key: Key4,      mods: Alt,       chars: "\x1b4"                 }
  - { key: Key5,      mods: Alt,       chars: "\x1b5"                 }
  - { key: Key6,      mods: Alt,       chars: "\x1b6"                 }
  - { key: Key7,      mods: Alt,       chars: "\x1b7"                 }
  - { key: Key8,      mods: Alt,       chars: "\x1b8"                 }
  - { key: Key9,      mods: Alt,       chars: "\x1b9"                 }
  - { key: Key0,      mods: Alt,       chars: "\x1b0"                 }
  - { key: Space,     mods: Control,   chars: "\x00"                  } # Ctrl + Space
  - { key: Grave,     mods: Alt,       chars: "\x1b`"                 } # Alt + `
  - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                 } # Alt + ~
  - { key: Period,    mods: Alt,       chars: "\x1b."                 } # Alt + .
  - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                 } # Alt + *
  - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                 } # Alt + #
  - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                 } # Alt + >
  - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                 } # Alt + <
  - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                 } # Alt + _
  - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                 } # Alt + %
  - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                 } # Alt + ^
  - { key: Backslash, mods: Alt,       chars: "\x1b\\"                } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                 } # Alt + |

  # macOS key bindings
  - { key: Return,      mods: Command, action: ToggleSimpleFullscreen }
  - { key: Plus,         mods: Command, action: IncreaseFontSize       }
  - { key: Minus,       mods: Command, action: DecreaseFontSize       }
  - { key: Key0,        mods: Command, action: ResetFontSize          }
  - { key: V,           mods: Command, action: Paste                  }
  - { key: C,           mods: Command, action: Copy                   }
  - { key: H,           mods: Command, action: Hide                   }
  - { key: Q,           mods: Command, action: Quit                   }
